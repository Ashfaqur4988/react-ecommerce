import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchLoggedInUser, fetchLoggedInUserOrders } from "./UserAPI";

const initialState = {
  userInfo: 0,
  status: "idle",
  userOrders: [],
};

//async thunk for async calls for the user info
export const fetchLoggedInUsersAsync = createAsyncThunk(
  "user/fetchLoggedInUser",
  async (userId) => {
    const response = await fetchLoggedInUser(userId);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

//async thunk for async calls for the users orders info
export const fetchLoggedInUserOrdersAsync = createAsyncThunk(
  "user/fetchLoggedInUser",
  async (userId) => {
    const response = await fetchLoggedInUserOrders(userId);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchLoggedInUsersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchLoggedInUsersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userInfo = action.payload; // this can be different or more from the logged-in User info
      })
      .addCase(fetchLoggedInUserOrdersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchLoggedInUserOrdersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userOrders = action.payload; // user orders info (we did not use push because we shall be pushing data just for one time)
      });
  },
});

export const { increment } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUserInfo = (state) => state.user.userInfo;

//user orders
export const selectUserOrders = (state) => state.user.userOrders;

export default userSlice.reducer;
