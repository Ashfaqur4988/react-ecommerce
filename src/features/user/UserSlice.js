import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchLoggedInUser,
  fetchLoggedInUserOrders,
  updateUser,
} from "./UserAPI";

const initialState = {
  userInfo: null, // only contain identity 'id' , 'email'
  status: "idle",
  // userOrders: [],
};

//async thunk for async calls for the user info
export const fetchLoggedInUsersAsync = createAsyncThunk(
  "user/fetchLoggedInUser",
  async () => {
    const response = await fetchLoggedInUser();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

//async thunk for async calls for the users orders info
export const fetchLoggedInUserOrdersAsync = createAsyncThunk(
  "user/fetchLoggedInUserOrders",
  async (id) => {
    const response = await fetchLoggedInUserOrders(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

//async thunk for async calls for update user info
export const updateUserAsync = createAsyncThunk(
  "user/updateUser",
  async (updateData) => {
    const response = await updateUser(updateData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchLoggedInUserOrdersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchLoggedInUserOrdersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userInfo.orders = action.payload; // user orders info (we did not use push because we shall be pushing data just for one time)
      })
      .addCase(fetchLoggedInUsersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchLoggedInUsersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userInfo = action.payload; // this can be different or more from the logged-in User info
      })

      .addCase(updateUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userInfo = action.payload; //earlier there was loggedInUser variable in other slices
      });
  },
});

export const { increment } = userSlice.actions;

//user all info
export const selectUserInfo = (state) => state.user.userInfo;

//user orders
export const selectUserOrders = (state) => state.user.userInfo.orders;

export const selectUserOrdersStatus = (state) => state.user.status;

export default userSlice.reducer;
